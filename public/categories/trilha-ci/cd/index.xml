<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Trilha CI/CD - Category - Emerson Silva</title>
        <link>https://emerson-silva.blog.br/categories/trilha-ci/cd/</link>
        <description>Trilha CI/CD - Category - Emerson Silva</description>
        <generator>Hugo -- gohugo.io</generator><language>pt-br</language><lastBuildDate>Wed, 20 Nov 2024 12:24:03 -0300</lastBuildDate><atom:link href="https://emerson-silva.blog.br/categories/trilha-ci/cd/" rel="self" type="application/rss+xml" /><item>
    <title>Trilha CI/CD - Gitlab-CI - Build de imagens de contêineres com Kaniko</title>
    <link>https://emerson-silva.blog.br/posts/trilha-cicd-gitlab-kaniko/</link>
    <pubDate>Wed, 20 Nov 2024 12:24:03 -0300</pubDate>
    <author>Emerson Silva</author>
    <guid>https://emerson-silva.blog.br/posts/trilha-cicd-gitlab-kaniko/</guid>
    <description><![CDATA[<p>Salve salve pessoal!!!</p>
<p>Tudo bem com vocês? Espero que sim!</p>
<p>Hoje no nosso blog se inicia uma nova sequência de post voltado a CI/CD. Vamos começar falando de como fazer build de imagens com o Kaniko no Gitlab-CI</p>
<h2 id="o-que-é-o-kaniko">O que é o Kaniko</h2>
<p>O Kaniko é um ferramenta utilizada para a criação de de imagens de contêineres em um arquivo Docker, dentro de um contêiner, cluster de K8s ou até mesmo dentro de uma pipeline, que é o objetivo do nosso artigo. Com o Kaniko, não há a necessidade da execução de um daemom do Docker, pois é possível executar os comandos de dentro de um arquivo Docker dentro do espaço do usuário.  Basicamente, ele vai gerar a imagem do contêiner baseado de um Dockerfile e enviar para o repositório de imagens definido.</p>]]></description>
</item>
</channel>
</rss>
