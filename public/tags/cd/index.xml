<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cd on Emerson Silva</title>
    <link>https://emerson-silva.blog.br/tags/cd/</link>
    <description>Recent content in Cd on Emerson Silva</description>
    <generator>Hugo</generator>
    <language>pt-br</language>
    <lastBuildDate>Tue, 10 Dec 2024 12:24:03 -0300</lastBuildDate>
    <atom:link href="https://emerson-silva.blog.br/tags/cd/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trilha CI/CD - Gitlab-CI - Deploy de uma EC2 usando Terraform</title>
      <link>https://emerson-silva.blog.br/posts/trilha-cicd-gitlab-terraform-aws/</link>
      <pubDate>Tue, 10 Dec 2024 12:24:03 -0300</pubDate>
      <guid>https://emerson-silva.blog.br/posts/trilha-cicd-gitlab-terraform-aws/</guid>
      <description>&lt;p&gt;Salve salve pessoal!!!&lt;/p&gt;&#xA;&lt;p&gt;Tudo bem com vocês? Espero que sim!&lt;/p&gt;&#xA;&lt;p&gt;Hoje no nosso blog vamos seguier com a sequência de post voltado a CI/CD. Vamos falar de como criar uma pipeline para criar um EC2 na AWS usando o Gitlab CI e armazenando o tf state no prórprio GitLab. Bora lá?&lt;/p&gt;&#xA;&lt;h2 id=&#34;o-que-é-o-terraform&#34;&gt;O que é o Terraform&lt;/h2&gt;&#xA;&lt;p&gt;O Terraform é uma ferramenta open-source desenvolvida pela HashiCorp que permite o gerenciamento de infraestrutura como código (Infrastructure as Code - IaC). Com o Terraform, você pode definir, provisionar e gerenciar recursos de infraestrutura em diversos provedores (como AWS, Azure, Google Cloud, entre outros) de maneira declarativa.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Trilha CI/CD - Gitlab-CI - Build de imagens de contêineres com Kaniko</title>
      <link>https://emerson-silva.blog.br/posts/trilha-cicd-gitlab-kaniko/</link>
      <pubDate>Wed, 20 Nov 2024 12:24:03 -0300</pubDate>
      <guid>https://emerson-silva.blog.br/posts/trilha-cicd-gitlab-kaniko/</guid>
      <description>&lt;p&gt;Salve salve pessoal!!!&lt;/p&gt;&#xA;&lt;p&gt;Tudo bem com vocês? Espero que sim!&lt;/p&gt;&#xA;&lt;p&gt;Hoje no nosso blog se inicia uma nova sequência de post voltado a CI/CD. Vamos começar falando de como fazer build de imagens com o Kaniko no Gitlab-CI&lt;/p&gt;&#xA;&lt;h2 id=&#34;o-que-é-o-kaniko&#34;&gt;O que é o Kaniko&lt;/h2&gt;&#xA;&lt;p&gt;O Kaniko é uma ferramenta utilizada para a criação de imagens de contêineres em um arquivo Docker, num contêiner, cluster de K8s ou até mesmo numa pipeline, que é o objetivo do nosso artigo. Com o Kaniko, não há a necessidade da execução de um daemon do Docker, por ser possível executar os comandos de em um arquivo Docker no espaço do usuário. Basicamente, ele vai gerar a imagem do contêiner baseado de um Dockerfile e enviar para o repositório de imagens definido.&lt;/p&gt;</description>
    </item>
    <item>
      <title>004 - Glossário Tech - o que é Continuous Delivery/Deployment</title>
      <link>https://emerson-silva.blog.br/posts/glossario-cd/</link>
      <pubDate>Sat, 27 Apr 2024 01:30:26 -0300</pubDate>
      <guid>https://emerson-silva.blog.br/posts/glossario-cd/</guid>
      <description>&lt;p&gt;Salve salve pessoal!!!&lt;/p&gt;&#xA;&lt;p&gt;Tudo bem com vocês? Espero que sim!&lt;br&gt;&#xA;E bora pra mais um post do &lt;strong&gt;Glossario Tech&lt;/strong&gt; onde irei trazer algumas tecnologias e falar delas de forma teórica. Bora lá?&lt;/p&gt;&#xA;&lt;h2 id=&#34;o-que-é-cd&#34;&gt;O que é CD&lt;/h2&gt;&#xA;&lt;p&gt;CD é a sigla para Continuous Delivery (Entrega Contínua) ou Continuous Deployment (Implantação Contínua), duas práticas relacionadas à Integração Contínua (CI) que têm como objetivo automatizar as etapas que seguem a integração de código, garantindo que o software esteja sempre pronto para ser entregue ou implantado em produção.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
