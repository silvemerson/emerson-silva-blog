<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kaniko on Emerson Silva</title>
    <link>https://emerson-silva.blog.br/tags/kaniko/</link>
    <description>Recent content in Kaniko on Emerson Silva</description>
    <generator>Hugo</generator>
    <language>pt-br</language>
    <lastBuildDate>Wed, 20 Nov 2024 12:24:03 -0300</lastBuildDate>
    <atom:link href="https://emerson-silva.blog.br/tags/kaniko/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Trilha CI/CD - Gitlab-CI - Build de imagens de contêineres com Kaniko</title>
      <link>https://emerson-silva.blog.br/posts/trilha-cicd-gitlab-kaniko/</link>
      <pubDate>Wed, 20 Nov 2024 12:24:03 -0300</pubDate>
      <guid>https://emerson-silva.blog.br/posts/trilha-cicd-gitlab-kaniko/</guid>
      <description>&lt;p&gt;Salve salve pessoal!!!&lt;/p&gt;&#xA;&lt;p&gt;Tudo bem com vocês? Espero que sim!&lt;/p&gt;&#xA;&lt;p&gt;Hoje no nosso blog se inicia uma nova sequência de post voltado a CI/CD. Vamos começar falando de como fazer build de imagens com o Kaniko no Gitlab-CI&lt;/p&gt;&#xA;&lt;h2 id=&#34;o-que-é-o-kaniko&#34;&gt;O que é o Kaniko&lt;/h2&gt;&#xA;&lt;p&gt;O Kaniko é uma ferramenta utilizada para a criação de imagens de contêineres em um arquivo Docker, num contêiner, cluster de K8s ou até mesmo numa pipeline, que é o objetivo do nosso artigo. Com o Kaniko, não há a necessidade da execução de um daemon do Docker, por ser possível executar os comandos de em um arquivo Docker no espaço do usuário. Basicamente, ele vai gerar a imagem do contêiner baseado de um Dockerfile e enviar para o repositório de imagens definido.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
